/*
 * This file is generated by jOOQ.
 */
package jooq.main.keys


import jooq.main.tables.Article
import jooq.main.tables.ArticleAuthor
import jooq.main.tables.ArticleKotlinVersion
import jooq.main.tables.ArticleLibrary
import jooq.main.tables.ArticleTopic
import jooq.main.tables.Book
import jooq.main.tables.BookLibrary
import jooq.main.tables.BookSpeaker
import jooq.main.tables.Bookmark
import jooq.main.tables.Comment
import jooq.main.tables.Company
import jooq.main.tables.Course
import jooq.main.tables.CourseLibrary
import jooq.main.tables.CourseSpeaker
import jooq.main.tables.DmLikes
import jooq.main.tables.FlywaySchemaHistory
import jooq.main.tables.GithubAuth
import jooq.main.tables.KotlinVersion
import jooq.main.tables.Kotliner
import jooq.main.tables.KotlinerLikeEntityState
import jooq.main.tables.KotlinerReadEntityState
import jooq.main.tables.Kug
import jooq.main.tables.KugEvent
import jooq.main.tables.KugMember
import jooq.main.tables.Library
import jooq.main.tables.LibraryVersion
import jooq.main.tables.Topic
import jooq.main.tables.Vacancy
import jooq.main.tables.Video
import jooq.main.tables.VideoLibrary
import jooq.main.tables.VideoSpeaker
import jooq.main.tables.records.ArticleAuthorRecord
import jooq.main.tables.records.ArticleKotlinVersionRecord
import jooq.main.tables.records.ArticleLibraryRecord
import jooq.main.tables.records.ArticleRecord
import jooq.main.tables.records.ArticleTopicRecord
import jooq.main.tables.records.BookLibraryRecord
import jooq.main.tables.records.BookRecord
import jooq.main.tables.records.BookSpeakerRecord
import jooq.main.tables.records.BookmarkRecord
import jooq.main.tables.records.CommentRecord
import jooq.main.tables.records.CompanyRecord
import jooq.main.tables.records.CourseLibraryRecord
import jooq.main.tables.records.CourseRecord
import jooq.main.tables.records.CourseSpeakerRecord
import jooq.main.tables.records.DmLikesRecord
import jooq.main.tables.records.FlywaySchemaHistoryRecord
import jooq.main.tables.records.GithubAuthRecord
import jooq.main.tables.records.KotlinVersionRecord
import jooq.main.tables.records.KotlinerLikeEntityStateRecord
import jooq.main.tables.records.KotlinerReadEntityStateRecord
import jooq.main.tables.records.KotlinerRecord
import jooq.main.tables.records.KugEventRecord
import jooq.main.tables.records.KugMemberRecord
import jooq.main.tables.records.KugRecord
import jooq.main.tables.records.LibraryRecord
import jooq.main.tables.records.LibraryVersionRecord
import jooq.main.tables.records.TopicRecord
import jooq.main.tables.records.VacancyRecord
import jooq.main.tables.records.VideoLibraryRecord
import jooq.main.tables.records.VideoRecord
import jooq.main.tables.records.VideoSpeakerRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ARTICLE_PKEY: UniqueKey<ArticleRecord> = Internal.createUniqueKey(Article.ARTICLE, DSL.name("article_pkey"), arrayOf(Article.ARTICLE.ID), true)
val ARTICLE_AUTHOR_PKEY: UniqueKey<ArticleAuthorRecord> = Internal.createUniqueKey(ArticleAuthor.ARTICLE_AUTHOR, DSL.name("article_author_pkey"), arrayOf(ArticleAuthor.ARTICLE_AUTHOR.ARTICLE_ID, ArticleAuthor.ARTICLE_AUTHOR.KOTLINER_ID), true)
val ARTICLE_KOTLIN_VERSION_PKEY: UniqueKey<ArticleKotlinVersionRecord> = Internal.createUniqueKey(ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION, DSL.name("article_kotlin_version_pkey"), arrayOf(ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION.ARTICLE_ID, ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION.KOTLIN_VERSION_ID), true)
val ARTICLE_LIBRARY_PKEY: UniqueKey<ArticleLibraryRecord> = Internal.createUniqueKey(ArticleLibrary.ARTICLE_LIBRARY, DSL.name("article_library_pkey"), arrayOf(ArticleLibrary.ARTICLE_LIBRARY.ARTICLE_ID, ArticleLibrary.ARTICLE_LIBRARY.LIBRARY_ID), true)
val ARTICLE_TOPIC_PKEY: UniqueKey<ArticleTopicRecord> = Internal.createUniqueKey(ArticleTopic.ARTICLE_TOPIC, DSL.name("article_topic_pkey"), arrayOf(ArticleTopic.ARTICLE_TOPIC.ARTICLE_ID, ArticleTopic.ARTICLE_TOPIC.TOPIC_ID), true)
val BOOK_PKEY: UniqueKey<BookRecord> = Internal.createUniqueKey(Book.BOOK, DSL.name("book_pkey"), arrayOf(Book.BOOK.ID), true)
val BOOK_LIBRARY_PKEY: UniqueKey<BookLibraryRecord> = Internal.createUniqueKey(BookLibrary.BOOK_LIBRARY, DSL.name("book_library_pkey"), arrayOf(BookLibrary.BOOK_LIBRARY.BOOK_ID, BookLibrary.BOOK_LIBRARY.LIBRARY_ID), true)
val BOOK_SPEAKER_PKEY: UniqueKey<BookSpeakerRecord> = Internal.createUniqueKey(BookSpeaker.BOOK_SPEAKER, DSL.name("book_speaker_pkey"), arrayOf(BookSpeaker.BOOK_SPEAKER.BOOK_ID, BookSpeaker.BOOK_SPEAKER.KOTLINER_ID), true)
val BOOKMARK_PKEY: UniqueKey<BookmarkRecord> = Internal.createUniqueKey(Bookmark.BOOKMARK, DSL.name("bookmark_pkey"), arrayOf(Bookmark.BOOKMARK.ID), true)
val COMMENT_PKEY: UniqueKey<CommentRecord> = Internal.createUniqueKey(Comment.COMMENT, DSL.name("comment_pkey"), arrayOf(Comment.COMMENT.ID), true)
val COMPANY_PKEY: UniqueKey<CompanyRecord> = Internal.createUniqueKey(Company.COMPANY, DSL.name("company_pkey"), arrayOf(Company.COMPANY.ID), true)
val COURSE_PKEY: UniqueKey<CourseRecord> = Internal.createUniqueKey(Course.COURSE, DSL.name("course_pkey"), arrayOf(Course.COURSE.ID), true)
val COURSE_LIBRARY_PKEY: UniqueKey<CourseLibraryRecord> = Internal.createUniqueKey(CourseLibrary.COURSE_LIBRARY, DSL.name("course_library_pkey"), arrayOf(CourseLibrary.COURSE_LIBRARY.COURSE_ID, CourseLibrary.COURSE_LIBRARY.LIBRARY_ID), true)
val COURSE_SPEAKER_PKEY: UniqueKey<CourseSpeakerRecord> = Internal.createUniqueKey(CourseSpeaker.COURSE_SPEAKER, DSL.name("course_speaker_pkey"), arrayOf(CourseSpeaker.COURSE_SPEAKER.COURSE_ID, CourseSpeaker.COURSE_SPEAKER.KOTLINER_ID), true)
val DM_LIKES_PKEY: UniqueKey<DmLikesRecord> = Internal.createUniqueKey(DmLikes.DM_LIKES, DSL.name("dm_likes_pkey"), arrayOf(DmLikes.DM_LIKES.ENTITY_ID), true)
val FLYWAY_SCHEMA_HISTORY_PK: UniqueKey<FlywaySchemaHistoryRecord> = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), arrayOf(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK), true)
val GITHUB_AUTH_PKEY: UniqueKey<GithubAuthRecord> = Internal.createUniqueKey(GithubAuth.GITHUB_AUTH, DSL.name("github_auth_pkey"), arrayOf(GithubAuth.GITHUB_AUTH.ID), true)
val KOTLIN_VERSION_PKEY: UniqueKey<KotlinVersionRecord> = Internal.createUniqueKey(KotlinVersion.KOTLIN_VERSION, DSL.name("kotlin_version_pkey"), arrayOf(KotlinVersion.KOTLIN_VERSION.ID), true)
val KOTLINER_PKEY: UniqueKey<KotlinerRecord> = Internal.createUniqueKey(Kotliner.KOTLINER, DSL.name("kotliner_pkey"), arrayOf(Kotliner.KOTLINER.ID), true)
val UNIQUE_KOTLINER_EMAIL: UniqueKey<KotlinerRecord> = Internal.createUniqueKey(Kotliner.KOTLINER, DSL.name("unique_kotliner_email"), arrayOf(Kotliner.KOTLINER.NORMALIZED_EMAIL), true)
val UNIQUE_KOTLINER_NICKNAME: UniqueKey<KotlinerRecord> = Internal.createUniqueKey(Kotliner.KOTLINER, DSL.name("unique_kotliner_nickname"), arrayOf(Kotliner.KOTLINER.NICKNAME), true)
val KOTLINER_LIKE_ENTITY_STATE_PKEY: UniqueKey<KotlinerLikeEntityStateRecord> = Internal.createUniqueKey(KotlinerLikeEntityState.KOTLINER_LIKE_ENTITY_STATE, DSL.name("kotliner_like_entity_state_pkey"), arrayOf(KotlinerLikeEntityState.KOTLINER_LIKE_ENTITY_STATE.KOTLINER_ID, KotlinerLikeEntityState.KOTLINER_LIKE_ENTITY_STATE.ENTITY_ID), true)
val KOTLINER_READ_ENTITY_STATE_PKEY: UniqueKey<KotlinerReadEntityStateRecord> = Internal.createUniqueKey(KotlinerReadEntityState.KOTLINER_READ_ENTITY_STATE, DSL.name("kotliner_read_entity_state_pkey"), arrayOf(KotlinerReadEntityState.KOTLINER_READ_ENTITY_STATE.KOTLINER_ID, KotlinerReadEntityState.KOTLINER_READ_ENTITY_STATE.ENTITY_ID), true)
val KUG_PKEY: UniqueKey<KugRecord> = Internal.createUniqueKey(Kug.KUG, DSL.name("kug_pkey"), arrayOf(Kug.KUG.ID), true)
val KUG_EVENT_PKEY: UniqueKey<KugEventRecord> = Internal.createUniqueKey(KugEvent.KUG_EVENT, DSL.name("kug_event_pkey"), arrayOf(KugEvent.KUG_EVENT.ID), true)
val UNIQUE_KOTLINER_KUG: UniqueKey<KugMemberRecord> = Internal.createUniqueKey(KugMember.KUG_MEMBER, DSL.name("unique_kotliner_kug"), arrayOf(KugMember.KUG_MEMBER.KOTLINER_ID, KugMember.KUG_MEMBER.KUG_ID), true)
val LIBRARY_PKEY: UniqueKey<LibraryRecord> = Internal.createUniqueKey(Library.LIBRARY, DSL.name("library_pkey"), arrayOf(Library.LIBRARY.ID), true)
val LIBRARY_VERSION_PKEY: UniqueKey<LibraryVersionRecord> = Internal.createUniqueKey(LibraryVersion.LIBRARY_VERSION, DSL.name("library_version_pkey"), arrayOf(LibraryVersion.LIBRARY_VERSION.ID), true)
val TOPIC_PKEY: UniqueKey<TopicRecord> = Internal.createUniqueKey(Topic.TOPIC, DSL.name("topic_pkey"), arrayOf(Topic.TOPIC.ID), true)
val VACANCY_PKEY: UniqueKey<VacancyRecord> = Internal.createUniqueKey(Vacancy.VACANCY, DSL.name("vacancy_pkey"), arrayOf(Vacancy.VACANCY.ID), true)
val VIDEO_PKEY: UniqueKey<VideoRecord> = Internal.createUniqueKey(Video.VIDEO, DSL.name("video_pkey"), arrayOf(Video.VIDEO.ID), true)
val VIDEO_LIBRARY_PKEY: UniqueKey<VideoLibraryRecord> = Internal.createUniqueKey(VideoLibrary.VIDEO_LIBRARY, DSL.name("video_library_pkey"), arrayOf(VideoLibrary.VIDEO_LIBRARY.VIDEO_ID, VideoLibrary.VIDEO_LIBRARY.LIBRARY_ID), true)
val VIDEO_SPEAKER_PKEY: UniqueKey<VideoSpeakerRecord> = Internal.createUniqueKey(VideoSpeaker.VIDEO_SPEAKER, DSL.name("video_speaker_pkey"), arrayOf(VideoSpeaker.VIDEO_SPEAKER.VIDEO_ID, VideoSpeaker.VIDEO_SPEAKER.KOTLINER_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ARTICLE__ARTICLE_CREATED_BY_FKEY: ForeignKey<ArticleRecord, KotlinerRecord> = Internal.createForeignKey(Article.ARTICLE, DSL.name("article_created_by_fkey"), arrayOf(Article.ARTICLE.CREATED_BY), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val ARTICLE__ARTICLE_ORIGINAL_ID_FKEY: ForeignKey<ArticleRecord, ArticleRecord> = Internal.createForeignKey(Article.ARTICLE, DSL.name("article_original_id_fkey"), arrayOf(Article.ARTICLE.ORIGINAL_ID), jooq.main.keys.ARTICLE_PKEY, arrayOf(Article.ARTICLE.ID), true)
val ARTICLE__ARTICLE_UPDATED_BY_FKEY: ForeignKey<ArticleRecord, KotlinerRecord> = Internal.createForeignKey(Article.ARTICLE, DSL.name("article_updated_by_fkey"), arrayOf(Article.ARTICLE.UPDATED_BY), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val ARTICLE_AUTHOR__ARTICLE_AUTHOR_ARTICLE_ID_FKEY: ForeignKey<ArticleAuthorRecord, ArticleRecord> = Internal.createForeignKey(ArticleAuthor.ARTICLE_AUTHOR, DSL.name("article_author_article_id_fkey"), arrayOf(ArticleAuthor.ARTICLE_AUTHOR.ARTICLE_ID), jooq.main.keys.ARTICLE_PKEY, arrayOf(Article.ARTICLE.ID), true)
val ARTICLE_AUTHOR__ARTICLE_AUTHOR_KOTLINER_ID_FKEY: ForeignKey<ArticleAuthorRecord, KotlinerRecord> = Internal.createForeignKey(ArticleAuthor.ARTICLE_AUTHOR, DSL.name("article_author_kotliner_id_fkey"), arrayOf(ArticleAuthor.ARTICLE_AUTHOR.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val ARTICLE_KOTLIN_VERSION__ARTICLE_KOTLIN_VERSION_ARTICLE_ID_FKEY: ForeignKey<ArticleKotlinVersionRecord, ArticleRecord> = Internal.createForeignKey(ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION, DSL.name("article_kotlin_version_article_id_fkey"), arrayOf(ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION.ARTICLE_ID), jooq.main.keys.ARTICLE_PKEY, arrayOf(Article.ARTICLE.ID), true)
val ARTICLE_KOTLIN_VERSION__ARTICLE_KOTLIN_VERSION_KOTLIN_VERSION_ID_FKEY: ForeignKey<ArticleKotlinVersionRecord, KotlinVersionRecord> = Internal.createForeignKey(ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION, DSL.name("article_kotlin_version_kotlin_version_id_fkey"), arrayOf(ArticleKotlinVersion.ARTICLE_KOTLIN_VERSION.KOTLIN_VERSION_ID), jooq.main.keys.KOTLIN_VERSION_PKEY, arrayOf(KotlinVersion.KOTLIN_VERSION.ID), true)
val ARTICLE_LIBRARY__ARTICLE_LIBRARY_ARTICLE_ID_FKEY: ForeignKey<ArticleLibraryRecord, ArticleRecord> = Internal.createForeignKey(ArticleLibrary.ARTICLE_LIBRARY, DSL.name("article_library_article_id_fkey"), arrayOf(ArticleLibrary.ARTICLE_LIBRARY.ARTICLE_ID), jooq.main.keys.ARTICLE_PKEY, arrayOf(Article.ARTICLE.ID), true)
val ARTICLE_LIBRARY__ARTICLE_LIBRARY_LIBRARY_ID_FKEY: ForeignKey<ArticleLibraryRecord, LibraryRecord> = Internal.createForeignKey(ArticleLibrary.ARTICLE_LIBRARY, DSL.name("article_library_library_id_fkey"), arrayOf(ArticleLibrary.ARTICLE_LIBRARY.LIBRARY_ID), jooq.main.keys.LIBRARY_PKEY, arrayOf(Library.LIBRARY.ID), true)
val ARTICLE_TOPIC__ARTICLE_TOPIC_ARTICLE_ID_FKEY: ForeignKey<ArticleTopicRecord, ArticleRecord> = Internal.createForeignKey(ArticleTopic.ARTICLE_TOPIC, DSL.name("article_topic_article_id_fkey"), arrayOf(ArticleTopic.ARTICLE_TOPIC.ARTICLE_ID), jooq.main.keys.ARTICLE_PKEY, arrayOf(Article.ARTICLE.ID), true)
val ARTICLE_TOPIC__ARTICLE_TOPIC_TOPIC_ID_FKEY: ForeignKey<ArticleTopicRecord, TopicRecord> = Internal.createForeignKey(ArticleTopic.ARTICLE_TOPIC, DSL.name("article_topic_topic_id_fkey"), arrayOf(ArticleTopic.ARTICLE_TOPIC.TOPIC_ID), jooq.main.keys.TOPIC_PKEY, arrayOf(Topic.TOPIC.ID), true)
val BOOK_LIBRARY__BOOK_LIBRARY_BOOK_ID_FKEY: ForeignKey<BookLibraryRecord, BookRecord> = Internal.createForeignKey(BookLibrary.BOOK_LIBRARY, DSL.name("book_library_book_id_fkey"), arrayOf(BookLibrary.BOOK_LIBRARY.BOOK_ID), jooq.main.keys.BOOK_PKEY, arrayOf(Book.BOOK.ID), true)
val BOOK_LIBRARY__BOOK_LIBRARY_LIBRARY_ID_FKEY: ForeignKey<BookLibraryRecord, LibraryRecord> = Internal.createForeignKey(BookLibrary.BOOK_LIBRARY, DSL.name("book_library_library_id_fkey"), arrayOf(BookLibrary.BOOK_LIBRARY.LIBRARY_ID), jooq.main.keys.LIBRARY_PKEY, arrayOf(Library.LIBRARY.ID), true)
val BOOK_SPEAKER__BOOK_SPEAKER_BOOK_ID_FKEY: ForeignKey<BookSpeakerRecord, BookRecord> = Internal.createForeignKey(BookSpeaker.BOOK_SPEAKER, DSL.name("book_speaker_book_id_fkey"), arrayOf(BookSpeaker.BOOK_SPEAKER.BOOK_ID), jooq.main.keys.BOOK_PKEY, arrayOf(Book.BOOK.ID), true)
val BOOK_SPEAKER__BOOK_SPEAKER_KOTLINER_ID_FKEY: ForeignKey<BookSpeakerRecord, KotlinerRecord> = Internal.createForeignKey(BookSpeaker.BOOK_SPEAKER, DSL.name("book_speaker_kotliner_id_fkey"), arrayOf(BookSpeaker.BOOK_SPEAKER.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val COMMENT__COMMENT_KOTLINER_ID_FKEY: ForeignKey<CommentRecord, KotlinerRecord> = Internal.createForeignKey(Comment.COMMENT, DSL.name("comment_kotliner_id_fkey"), arrayOf(Comment.COMMENT.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val COMMENT__COMMENT_PARENT_ID_FKEY: ForeignKey<CommentRecord, CommentRecord> = Internal.createForeignKey(Comment.COMMENT, DSL.name("comment_parent_id_fkey"), arrayOf(Comment.COMMENT.PARENT_ID), jooq.main.keys.COMMENT_PKEY, arrayOf(Comment.COMMENT.ID), true)
val COURSE_LIBRARY__COURSE_LIBRARY_COURSE_ID_FKEY: ForeignKey<CourseLibraryRecord, CourseRecord> = Internal.createForeignKey(CourseLibrary.COURSE_LIBRARY, DSL.name("course_library_course_id_fkey"), arrayOf(CourseLibrary.COURSE_LIBRARY.COURSE_ID), jooq.main.keys.COURSE_PKEY, arrayOf(Course.COURSE.ID), true)
val COURSE_LIBRARY__COURSE_LIBRARY_LIBRARY_ID_FKEY: ForeignKey<CourseLibraryRecord, LibraryRecord> = Internal.createForeignKey(CourseLibrary.COURSE_LIBRARY, DSL.name("course_library_library_id_fkey"), arrayOf(CourseLibrary.COURSE_LIBRARY.LIBRARY_ID), jooq.main.keys.LIBRARY_PKEY, arrayOf(Library.LIBRARY.ID), true)
val COURSE_SPEAKER__COURSE_SPEAKER_COURSE_ID_FKEY: ForeignKey<CourseSpeakerRecord, CourseRecord> = Internal.createForeignKey(CourseSpeaker.COURSE_SPEAKER, DSL.name("course_speaker_course_id_fkey"), arrayOf(CourseSpeaker.COURSE_SPEAKER.COURSE_ID), jooq.main.keys.COURSE_PKEY, arrayOf(Course.COURSE.ID), true)
val COURSE_SPEAKER__COURSE_SPEAKER_KOTLINER_ID_FKEY: ForeignKey<CourseSpeakerRecord, KotlinerRecord> = Internal.createForeignKey(CourseSpeaker.COURSE_SPEAKER, DSL.name("course_speaker_kotliner_id_fkey"), arrayOf(CourseSpeaker.COURSE_SPEAKER.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KOTLINER_LIKE_ENTITY_STATE__KOTLINER_LIKE_ENTITY_STATE_KOTLINER_ID_FKEY: ForeignKey<KotlinerLikeEntityStateRecord, KotlinerRecord> = Internal.createForeignKey(KotlinerLikeEntityState.KOTLINER_LIKE_ENTITY_STATE, DSL.name("kotliner_like_entity_state_kotliner_id_fkey"), arrayOf(KotlinerLikeEntityState.KOTLINER_LIKE_ENTITY_STATE.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KOTLINER_READ_ENTITY_STATE__KOTLINER_READ_ENTITY_STATE_KOTLINER_ID_FKEY: ForeignKey<KotlinerReadEntityStateRecord, KotlinerRecord> = Internal.createForeignKey(KotlinerReadEntityState.KOTLINER_READ_ENTITY_STATE, DSL.name("kotliner_read_entity_state_kotliner_id_fkey"), arrayOf(KotlinerReadEntityState.KOTLINER_READ_ENTITY_STATE.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KUG__KUG_CREATED_BY_FKEY: ForeignKey<KugRecord, KotlinerRecord> = Internal.createForeignKey(Kug.KUG, DSL.name("kug_created_by_fkey"), arrayOf(Kug.KUG.CREATED_BY), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KUG__KUG_UPDATED_BY_FKEY: ForeignKey<KugRecord, KotlinerRecord> = Internal.createForeignKey(Kug.KUG, DSL.name("kug_updated_by_fkey"), arrayOf(Kug.KUG.UPDATED_BY), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KUG_EVENT__KUG_EVENT_KUG_ID_FKEY: ForeignKey<KugEventRecord, KugRecord> = Internal.createForeignKey(KugEvent.KUG_EVENT, DSL.name("kug_event_kug_id_fkey"), arrayOf(KugEvent.KUG_EVENT.KUG_ID), jooq.main.keys.KUG_PKEY, arrayOf(Kug.KUG.ID), true)
val KUG_EVENT__KUG_EVENT_UPDATED_BY_FKEY: ForeignKey<KugEventRecord, KotlinerRecord> = Internal.createForeignKey(KugEvent.KUG_EVENT, DSL.name("kug_event_updated_by_fkey"), arrayOf(KugEvent.KUG_EVENT.UPDATED_BY), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KUG_MEMBER__KUG_MEMBER_KOTLINER_ID_FKEY: ForeignKey<KugMemberRecord, KotlinerRecord> = Internal.createForeignKey(KugMember.KUG_MEMBER, DSL.name("kug_member_kotliner_id_fkey"), arrayOf(KugMember.KUG_MEMBER.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val KUG_MEMBER__KUG_MEMBER_KUG_ID_FKEY: ForeignKey<KugMemberRecord, KugRecord> = Internal.createForeignKey(KugMember.KUG_MEMBER, DSL.name("kug_member_kug_id_fkey"), arrayOf(KugMember.KUG_MEMBER.KUG_ID), jooq.main.keys.KUG_PKEY, arrayOf(Kug.KUG.ID), true)
val LIBRARY_VERSION__LIBRARY_VERSION_LIBRARY_ID_FKEY: ForeignKey<LibraryVersionRecord, LibraryRecord> = Internal.createForeignKey(LibraryVersion.LIBRARY_VERSION, DSL.name("library_version_library_id_fkey"), arrayOf(LibraryVersion.LIBRARY_VERSION.LIBRARY_ID), jooq.main.keys.LIBRARY_PKEY, arrayOf(Library.LIBRARY.ID), true)
val TOPIC__TOPIC_PARENT_ID_FKEY: ForeignKey<TopicRecord, TopicRecord> = Internal.createForeignKey(Topic.TOPIC, DSL.name("topic_parent_id_fkey"), arrayOf(Topic.TOPIC.PARENT_ID), jooq.main.keys.TOPIC_PKEY, arrayOf(Topic.TOPIC.ID), true)
val VACANCY__VACANCY_COMPANY_ID_FKEY: ForeignKey<VacancyRecord, CompanyRecord> = Internal.createForeignKey(Vacancy.VACANCY, DSL.name("vacancy_company_id_fkey"), arrayOf(Vacancy.VACANCY.COMPANY_ID), jooq.main.keys.COMPANY_PKEY, arrayOf(Company.COMPANY.ID), true)
val VACANCY__VACANCY_KOTLINER_ID_FKEY: ForeignKey<VacancyRecord, KotlinerRecord> = Internal.createForeignKey(Vacancy.VACANCY, DSL.name("vacancy_kotliner_id_fkey"), arrayOf(Vacancy.VACANCY.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val VIDEO_LIBRARY__VIDEO_LIBRARY_LIBRARY_ID_FKEY: ForeignKey<VideoLibraryRecord, LibraryRecord> = Internal.createForeignKey(VideoLibrary.VIDEO_LIBRARY, DSL.name("video_library_library_id_fkey"), arrayOf(VideoLibrary.VIDEO_LIBRARY.LIBRARY_ID), jooq.main.keys.LIBRARY_PKEY, arrayOf(Library.LIBRARY.ID), true)
val VIDEO_LIBRARY__VIDEO_LIBRARY_VIDEO_ID_FKEY: ForeignKey<VideoLibraryRecord, VideoRecord> = Internal.createForeignKey(VideoLibrary.VIDEO_LIBRARY, DSL.name("video_library_video_id_fkey"), arrayOf(VideoLibrary.VIDEO_LIBRARY.VIDEO_ID), jooq.main.keys.VIDEO_PKEY, arrayOf(Video.VIDEO.ID), true)
val VIDEO_SPEAKER__VIDEO_SPEAKER_KOTLINER_ID_FKEY: ForeignKey<VideoSpeakerRecord, KotlinerRecord> = Internal.createForeignKey(VideoSpeaker.VIDEO_SPEAKER, DSL.name("video_speaker_kotliner_id_fkey"), arrayOf(VideoSpeaker.VIDEO_SPEAKER.KOTLINER_ID), jooq.main.keys.KOTLINER_PKEY, arrayOf(Kotliner.KOTLINER.ID), true)
val VIDEO_SPEAKER__VIDEO_SPEAKER_VIDEO_ID_FKEY: ForeignKey<VideoSpeakerRecord, VideoRecord> = Internal.createForeignKey(VideoSpeaker.VIDEO_SPEAKER, DSL.name("video_speaker_video_id_fkey"), arrayOf(VideoSpeaker.VIDEO_SPEAKER.VIDEO_ID), jooq.main.keys.VIDEO_PKEY, arrayOf(Video.VIDEO.ID), true)
