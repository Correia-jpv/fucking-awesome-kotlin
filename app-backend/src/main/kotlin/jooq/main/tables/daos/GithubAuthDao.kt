/*
 * This file is generated by jOOQ.
 */
package jooq.main.tables.daos


import java.time.LocalDateTime
import java.util.UUID

import jooq.main.tables.GithubAuth
import jooq.main.tables.records.GithubAuthRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubAuthDao(configuration: Configuration?) : DAOImpl<GithubAuthRecord, jooq.main.tables.pojos.GithubAuth, UUID>(GithubAuth.GITHUB_AUTH, jooq.main.tables.pojos.GithubAuth::class.java, configuration) {

    /**
     * Create a new GithubAuthDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.main.tables.pojos.GithubAuth): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): jooq.main.tables.pojos.GithubAuth? = fetchOne(GithubAuth.GITHUB_AUTH.ID, value)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: UUID?, upperInclusive: UUID?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: UUID): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.USER_ID, *values)

    /**
     * Fetch records that have <code>access_token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAccessToken(lowerInclusive: String?, upperInclusive: String?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.ACCESS_TOKEN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>access_token IN (values)</code>
     */
    fun fetchByAccessToken(vararg values: String): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.ACCESS_TOKEN, *values)

    /**
     * Fetch records that have <code>expires_in BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfExpiresIn(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.EXPIRES_IN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>expires_in IN (values)</code>
     */
    fun fetchByExpiresIn(vararg values: Int): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.EXPIRES_IN, *values.toTypedArray())

    /**
     * Fetch records that have <code>refresh_token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRefreshToken(lowerInclusive: String?, upperInclusive: String?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.REFRESH_TOKEN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>refresh_token IN (values)</code>
     */
    fun fetchByRefreshToken(vararg values: String): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.REFRESH_TOKEN, *values)

    /**
     * Fetch records that have <code>refresh_token_expires_in BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfRefreshTokenExpiresIn(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.REFRESH_TOKEN_EXPIRES_IN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>refresh_token_expires_in IN (values)</code>
     */
    fun fetchByRefreshTokenExpiresIn(vararg values: Int): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.REFRESH_TOKEN_EXPIRES_IN, *values.toTypedArray())

    /**
     * Fetch records that have <code>token_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTokenType(lowerInclusive: String?, upperInclusive: String?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.TOKEN_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>token_type IN (values)</code>
     */
    fun fetchByTokenType(vararg values: String): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.TOKEN_TYPE, *values)

    /**
     * Fetch records that have <code>scope BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfScope(lowerInclusive: String?, upperInclusive: String?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.SCOPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>scope IN (values)</code>
     */
    fun fetchByScope(vararg values: String): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.SCOPE, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<jooq.main.tables.pojos.GithubAuth> = fetchRange(GithubAuth.GITHUB_AUTH.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: LocalDateTime): List<jooq.main.tables.pojos.GithubAuth> = fetch(GithubAuth.GITHUB_AUTH.CREATED_AT, *values)
}
