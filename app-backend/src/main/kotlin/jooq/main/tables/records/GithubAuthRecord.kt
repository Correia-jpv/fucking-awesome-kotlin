/*
 * This file is generated by jOOQ.
 */
package jooq.main.tables.records


import java.time.LocalDateTime
import java.util.UUID

import jooq.main.tables.GithubAuth

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GithubAuthRecord() : UpdatableRecordImpl<GithubAuthRecord>(GithubAuth.GITHUB_AUTH) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var userId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var accessToken: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var expiresIn: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var refreshToken: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var refreshTokenExpiresIn: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var tokenType: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var scope: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised GithubAuthRecord
     */
    constructor(id: UUID? = null, userId: UUID? = null, accessToken: String? = null, expiresIn: Int? = null, refreshToken: String? = null, refreshTokenExpiresIn: Int? = null, tokenType: String? = null, scope: String? = null, createdAt: LocalDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.accessToken = accessToken
        this.expiresIn = expiresIn
        this.refreshToken = refreshToken
        this.refreshTokenExpiresIn = refreshTokenExpiresIn
        this.tokenType = tokenType
        this.scope = scope
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GithubAuthRecord
     */
    constructor(value: jooq.main.tables.pojos.GithubAuth?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.accessToken = value.accessToken
            this.expiresIn = value.expiresIn
            this.refreshToken = value.refreshToken
            this.refreshTokenExpiresIn = value.refreshTokenExpiresIn
            this.tokenType = value.tokenType
            this.scope = value.scope
            this.createdAt = value.createdAt
            resetChangedOnNotNull()
        }
    }
}
